[{"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/index.js":"1","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/store.js":"2","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/App.js":"3","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reportWebVitals.js":"4","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reducers/productReducers.js":"5","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reducers/cartReducers.js":"6","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Header.js":"7","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Footer.js":"8","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ProductScreen.js":"9","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/PaymentScreen.js":"10","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reducers/orderReducers.js":"11","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/CartScreen.js":"12","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reducers/userReducers.js":"13","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/HomeScreen.js":"14","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/OrderScreen.js":"15","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/PlaceOrderScreen.js":"16","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ShippingScreen.js":"17","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ProfileScreen.js":"18","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/UserListScreen.js":"19","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/LoginScreen.js":"20","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/RegisterScreen.js":"21","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/UserEditScreen.js":"22","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ProductEditScreen.js":"23","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ProductListScreen.js":"24","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/OrderListScreen.js":"25","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/SearchBox.js":"26","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Rating.js":"27","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Loader.js":"28","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/FormContainer.js":"29","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/CheckoutSteps.js":"30","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Product.js":"31","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Paginate.js":"32","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Message.js":"33","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/constants/productConstants.js":"34","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/constants/userConstants.js":"35","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/constants/cartConstants.js":"36","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/ProductCarousel.js":"37","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/constants/orderConstants.js":"38","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/actions/userActions.js":"39","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/actions/productActions.js":"40","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/actions/orderActions.js":"41","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/actions/cartActions.js":"42","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/i18n.js":"43","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Wts.js":"44"},{"size":598,"mtime":1638324653109,"results":"45","hashOfConfig":"46"},{"size":2461,"mtime":1637563232164,"results":"47","hashOfConfig":"46"},{"size":2387,"mtime":1638330337719,"results":"48","hashOfConfig":"46"},{"size":362,"mtime":1637563232156,"results":"49","hashOfConfig":"46"},{"size":4158,"mtime":1637563232156,"results":"50","hashOfConfig":"46"},{"size":1492,"mtime":1637563232156,"results":"51","hashOfConfig":"46"},{"size":4329,"mtime":1638327912487,"results":"52","hashOfConfig":"46"},{"size":367,"mtime":1637563232144,"results":"53","hashOfConfig":"46"},{"size":11425,"mtime":1637989022390,"results":"54","hashOfConfig":"46"},{"size":1820,"mtime":1637989022390,"results":"55","hashOfConfig":"46"},{"size":4783,"mtime":1637563232156,"results":"56","hashOfConfig":"46"},{"size":5309,"mtime":1637989022390,"results":"57","hashOfConfig":"46"},{"size":4032,"mtime":1637563232156,"results":"58","hashOfConfig":"46"},{"size":1667,"mtime":1638323451405,"results":"59","hashOfConfig":"46"},{"size":9672,"mtime":1637989022390,"results":"60","hashOfConfig":"46"},{"size":7047,"mtime":1637989022390,"results":"61","hashOfConfig":"46"},{"size":3347,"mtime":1637989022390,"results":"62","hashOfConfig":"46"},{"size":6874,"mtime":1637989022390,"results":"63","hashOfConfig":"46"},{"size":3444,"mtime":1637989022390,"results":"64","hashOfConfig":"46"},{"size":2633,"mtime":1637989022390,"results":"65","hashOfConfig":"46"},{"size":4059,"mtime":1637989022390,"results":"66","hashOfConfig":"46"},{"size":4041,"mtime":1637989022390,"results":"67","hashOfConfig":"46"},{"size":8264,"mtime":1637989022390,"results":"68","hashOfConfig":"46"},{"size":5138,"mtime":1637989022390,"results":"69","hashOfConfig":"46"},{"size":3385,"mtime":1637989022390,"results":"70","hashOfConfig":"46"},{"size":1145,"mtime":1637989022390,"results":"71","hashOfConfig":"46"},{"size":1897,"mtime":1637563232156,"results":"72","hashOfConfig":"46"},{"size":457,"mtime":1637563232156,"results":"73","hashOfConfig":"46"},{"size":378,"mtime":1637563232144,"results":"74","hashOfConfig":"46"},{"size":1697,"mtime":1637989022390,"results":"75","hashOfConfig":"46"},{"size":1089,"mtime":1638322717130,"results":"76","hashOfConfig":"46"},{"size":859,"mtime":1637563232156,"results":"77","hashOfConfig":"46"},{"size":226,"mtime":1637563232156,"results":"78","hashOfConfig":"46"},{"size":1500,"mtime":1637563232156,"results":"79","hashOfConfig":"46"},{"size":1476,"mtime":1637563232156,"results":"80","hashOfConfig":"46"},{"size":285,"mtime":1637563232156,"results":"81","hashOfConfig":"46"},{"size":1386,"mtime":1637563232156,"results":"82","hashOfConfig":"46"},{"size":1232,"mtime":1637563232156,"results":"83","hashOfConfig":"46"},{"size":8103,"mtime":1637563232144,"results":"84","hashOfConfig":"46"},{"size":6746,"mtime":1637563232144,"results":"85","hashOfConfig":"46"},{"size":6903,"mtime":1637563232144,"results":"86","hashOfConfig":"46"},{"size":1861,"mtime":1637563232144,"results":"87","hashOfConfig":"46"},{"size":683,"mtime":1637989022390,"results":"88","hashOfConfig":"46"},{"size":586,"mtime":1638331045780,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i4fqgv",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/index.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/store.js",[],["194","195"],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/App.js",["196"],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reportWebVitals.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reducers/productReducers.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reducers/cartReducers.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Header.js",["197","198","199","200"],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Footer.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ProductScreen.js",["201"],"import React, {useState, useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport {Row, Col, Image, Card, ListGroup, Button, Form } from 'react-bootstrap'\nimport Rating from '../components/Rating'\n\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listProductDetails, createProductReview } from '../actions/productActions'\nimport {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants'\n\n\n\nfunction ProductScreen({ match, history }) {\n    const {t, i18n} = useTranslation()\n\n    const [qty, setQty] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const {loading, error, product} = productDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\n    const {loading:loadingProductReview, error: errorProductReview, success: successProductReview} = productReviewCreate\n\n    useEffect(() => {\n        if (successProductReview) {\n            setRating(0)\n            setComment('')\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\n        }\n\n        dispatch(listProductDetails(match.params.id))\n\n    },[dispatch, match, successProductReview])\n\n    const addToCartHendler = () => {\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        dispatch(createProductReview(\n            match.params.id, {\n            rating,\n            comment\n        }\n        ))\n    }\n\n    return (\n        <div>\n            <Link to='/' className='btn btn-dark my-3'>{t(\"goBack\")}</Link> <br/>\n\n            {loading ?\n                <Loader />\n                :error\n                    ? <Message variant='danger'>{error}</Message>\n                :(\n                    <div>\n                        <Row>\n                            <Col md={6}>\n                                <Image src={product.image} alt={product.name} fluid />\n                            </Col>\n\n                            <Col md={3}>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item>\n                                        <h3>{product.name}</h3>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        {t(\"price\")}: $ {product.price}\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        Description: {product.description}\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Col>\n\n                            <Col md={3}>\n                                <Card>\n                                    <ListGroup>\n                                        <ListGroup variant=\"flush\">\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>{t(\"price\")}:</Col>\n                                                    <Col>\n                                                        <strong>$ {product.price}</strong>\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col>{t(\"status\")}:</Col>\n                                                    <Col>\n                                                        {product.countInStock > 0 ? t(\"In Stock\") : t(\"Out of Stock\")}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n\n                                            {product.countInStock > 0 && (\n                                                <ListGroup.Item>\n                                                    <Row>\n                                                        <Col>{t(\"Qty\")}</Col>\n                                                        <Col xs='auto' className='my-2'>\n                                                            <Form.Select\n                                                                as='select'\n                                                                value={qty}\n                                                                onChange={(e) => setQty(e.target.value)}\n                                                            >\n                                                                {\n                                                                    [...Array(product.countInStock).keys()].map((x) => (\n                                                                        <option key={x + 1} value={x + 1}>\n                                                                            {x + 1}\n                                                                        </option>\n                                                                    ))\n                                                                }\n                                                            </Form.Select>\n                                                        </Col>\n                                                    </Row>\n                                                </ListGroup.Item>\n                                            )}\n\n                                            <ListGroup.Item>\n                                                <Button \n                                                onClick={addToCartHendler}\n                                                className=\" product-btn btn-black\" \n                                                disabled={product.countInStock <= 0} \n                                                type=\"button\">\n                                                    {t(\"Add to Cart\")} \n                                                </Button>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    </ListGroup>\n                                </Card>\n                            </Col>\n                        </Row>  \n                        <Row>\n                            <Col md={6}>\n                                <h4 className='my-3'>{t(\"Reviews\")}</h4>\n                                {product.reviews.length === 0 && <Message variant='info'>No reviews</Message>}\n                                <ListGroup variant='flush'>\n                                    {product.reviews.map((review) => (\n                                        <ListGroup.Item key={review._id}>\n                                            <strong>{review.name}</strong>\n                                            <Rating value={review.rating} color='#f8e825'/>\n                                            <p>{t(\"date\")}: {review.createdAt.substring(0,10)}</p>\n                                            <p>{review.comment}</p>\n                                        </ListGroup.Item>\n                                    ))}\n\n\n                                    <ListGroup>\n                                    <h4 className='my-3'>{t(\"Write a reviews\")}</h4>\n                                        {loadingProductReview && <Loader />}\n                                        {successProductReview && <Message variant='success'>Review Submitted</Message>}\n                                        {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\n\n                                        {userInfo ? (\n                                            <Form onSubmit={submitHandler}>\n                                                <Form.Group controlId='rating'>\n                                                    <Form.Label>{t(\"Rating\")}</Form.Label>\n                                                    <Form.Control\n                                                        as='select'\n                                                        value={rating}\n                                                        onChange={(e) => setRating(e.target.value)}\n                                                    >\n                                                        <option value=''>Select...</option>\n                                                        <option value='1'>1 - Poor</option>\n                                                        <option value='2'>2 - Fair</option>\n                                                        <option value='3'>3 - Good</option>\n                                                        <option value='4'>4 - Very Good</option>\n                                                        <option value='5'>5 - Excellent</option>\n                                                    </Form.Control>\n                                                </Form.Group>\n\n                                                <Form.Group className='my-3' controlId='comment'>\n                                                    <Form.Label>{t(\"Review\")}</Form.Label>\n                                                    <Form.Control\n                                                        as='textarea'\n                                                        row='5'\n                                                        value={comment}\n                                                        onChange={(e) => setComment(e.target.value)}\n                                                    ></Form.Control>\n                                                </Form.Group>\n\n                                                <Button\n                                                    disabled={loadingProductReview}\n                                                    type='submit'\n                                                    variant='primary'\n                                                >\n                                                    {t(\"submit\")} \n                                                </Button>\n\n                                            </Form>\n                                        ):(\n                                            <Message variant='info'>Please <Link to='/login'> login</Link> to write a review</Message>\n                                        )}    \n                                    </ListGroup>\n                                </ListGroup>\n                            </Col>\n                        </Row>\n                    </div>\n                )\n            }\n\n            \n        </div>\n    )\n}\n\nexport default ProductScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/PaymentScreen.js",["202"],"import React, {useState, } from 'react' //useEffect\nimport{ useTranslation } from 'react-i18next'\nimport { Form, Button, Col } from 'react-bootstrap'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { savePaymentMethod } from '../actions/cartActions'\n\nfunction PaymentScreen({history}) {\n    const {t, i18n} = useTranslation()\n\n    const cart = useSelector(state => state.cart)\n    const {shippingAddress} = cart\n\n    const dispatch = useDispatch()\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n    if(!shippingAddress.address){\n        history.push(`/shipping`)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        history.push(`/placeorder`)\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 step3 />\n\n            <Form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>{t(\"Select Method\")}</Form.Label>\n\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='PayPal or Credit Cart'\n                            id='paypal'\n                            name='peymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value) }\n                        >\n\n                        </Form.Check>\n                    </Col>\n                </Form.Group>\n\n                <Button className='mt-2' type='submit' variant='primary'>\n                    {t(\"Continue\")} \n                </Button>\n            </Form>\n\n        </FormContainer>\n    )\n}\n\nexport default PaymentScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reducers/orderReducers.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/CartScreen.js",["203"],"import React, {useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\nimport Message from '../components/Message'\nimport { addToCart, removeFromCart } from '../actions/cartActions'\n\nfunction CartScreen({match, location, history}) {\n    const {t, i18n} = useTranslation()\n\n    const productId = match.params.id\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n    const {cartItems} = cart\n    console.log('cartItems:', cartItems)\n\n    useEffect(() => {\n        if(productId){\n            dispatch(addToCart(productId, qty))\n        }\n    }, [dispatch, productId, qty])\n\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const checkoutHendler = () => {\n        history.push('/login?redirect=shipping')\n    }\n\n    return (\n        <Row>\n            {/* <Row>\n            <h2>Shopping Cart</h2><br/>\n\n                <Link to='/'>\n                <Button\n                    type='button'\n                    variant='dark'\n                    >\n                        Continue To Shopping\n                    </Button>\n                </Link>\n            </Row> */}\n\n            <Row>\n                <Col md={8}>\n                    {cartItems.length === 0 ? (\n                        <Message variant='info'>\n                            {t(\"Your cart is empty\")} <Link to='/'>{t(\"goBack\")}</Link>\n                        </Message>\n                    ): (\n                        <ListGroup variant='flash'>\n                            {cartItems.map(item => (\n                                <ListGroup.Item key={item.product}>\n                                    <Row>\n                                        <Col md={2}>\n                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                        </Col>\n\n                                        <Col md={3}>\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                        </Col>\n\n                                        <Col md={2}>\n                                            ${item.price}\n                                        </Col>\n\n                                        <Col md={3}>\n                                            <Form.Control\n                                                as='select'\n                                                value={item.qty}\n                                                onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\n                                            >\n                                                {\n                                                    [...Array(item.countInStock).keys()].map((x) => (\n                                                        <option key={x + 1} value={x + 1}>\n                                                            {x + 1}\n                                                        </option>\n                                                    ))\n                                                }\n                                            </Form.Control>\n                                        </Col>\n\n                                        <Col md={1}>\n                                            <Button\n                                            type='button'\n                                            variant='light'\n                                            onClick={() => removeFromCartHandler(item.product)}\n                                            >\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    )}\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <h3>{t(\"Subtotal\")} ({cartItems.reduce((acc, item) => acc + item.qty, 0)}) {t(\"items\")}</h3>\n                                ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\n                            </ListGroup.Item>\n                        </ListGroup>\n\n                        <ListGroup.Item>\n                            <Button\n                                type='button'\n                                className='product-btn btn-block'\n                                disabled={cartItems.length === 0}\n                                onClick={checkoutHendler}\n                            >\n                                {t(\"Proceed To Checkout\")} \n                            </Button>\n                        </ListGroup.Item>\n                    </Card>\n                </Col>\n            </Row>\n        </Row>\n    )\n}\n\nexport default CartScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/reducers/userReducers.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/HomeScreen.js",["204"],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/OrderScreen.js",["205"],"import React, { useState, useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { Row, Col, ListGroup, Image, Button, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport {useDispatch, useSelector } from 'react-redux' \nimport { getOrderDetails, payOrder, deliverOrder, } from '../actions/orderActions'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\n\n\nfunction OrderScreen({ match, history }) {\n    const {t, i18n} = useTranslation() \n\n    const orderId = match.params.id\n    const dispatch = useDispatch()\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const orderDetails = useSelector(state => state.orderDetails)\n    const {order, error, loading} = orderDetails\n\n    const orderPay = useSelector(state => state.orderPay)\n    const {loading:loadingPay, success:successPay} = orderPay\n\n    const orderDeliver = useSelector(state => state.orderDeliver)\n    const {loading:loadingDeliver, success:successDeliver} = orderDeliver\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n    \n    if (!loading && !error) {\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    } \n\n// AQHrbC-Z5_Mhsqj1_1N6GHpiNepAXAT9LUFP5RF1BVT0kaCMdSyPefjdbwqEtEzsCfTy1yzWiAhlICRu\n\n    const addPayPalScript = () => {\n        const script = document.createElement('script')\n        script.type = 'text/javascript'\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AQHrbC-Z5_Mhsqj1_1N6GHpiNepAXAT9LUFP5RF1BVT0kaCMdSyPefjdbwqEtEzsCfTy1yzWiAhlICRu' // this shuld be hide!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        script.async = true\n        script.onload = () => {\n            setSdkReady(true)\n        }\n        document.body.appendChild(script)\n    }\n\n    useEffect(() => {\n        if(!userInfo){\n            history.push('/login')\n        }\n        if(!order || successPay || order._id!==Number(orderId) || successDeliver){\n            dispatch({type:ORDER_PAY_RESET})\n            dispatch({type:ORDER_DELIVER_RESET})\n            dispatch(getOrderDetails(orderId))\n        }else if(!order.isPaid){\n            if(!window.paypal){\n                addPayPalScript()\n            }else{\n                setSdkReady(true)\n            }\n        }\n        \n    }, [history, userInfo, successPay, dispatch, order, orderId, successDeliver])\n\n    const successPaymentHandler = (paymentResult) => {\n        dispatch(payOrder(orderId, paymentResult))\n    }\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n    return loading ? (\n        <Loader />\n    ) : error ? (\n        <Message variant='danger'>{error}</Message>\n    ) : (\n        <div>\n            <h2>{t(\"order\")}: {order._id}</h2>\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <h2>{t(\"shipping\")}</h2>\n                            <p><strong>{t(\"name\")}: </strong>{order.user.name}</p>\n                            <p><strong>{t(\"email\")}: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\n\n                            <p>\n                                <strong>{t(\"shipping address\")}: </strong>\n                                {order.shippingAddress.address}, {order.shippingAddress.city}\n                                {'  '}\n                                {order.shippingAddress.postalCode}.\n                                {'  '}\n                                {order.shippingAddress.country}\n                            </p>\n                            {order.isDelivered ? (\n                                <Message variant=\"success\">{t(\"Delivered on\")} {order.deliveredAt}</Message>\n                            ) : (\n                                    <Message variant=\"warning\">{t(\"Not Delivered\")}</Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>{t(\"Payment Method\")}</h2>\n\n                            <p>\n                                <strong>{t(\"method\")}: </strong>\n                                {order.paymentMethod}\n                            </p>\n                            {order.isPaid ? (\n                                <Message variant=\"success\">{t(\"Paid on\")}: {order.paidAt.substring(0, 16)}</Message>\n                            ) : (\n                                <Message variant=\"warning\">{t(\"Not Paid\")}</Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>{t(\"Order Items\")}</h2>\n                            {order.orderItems.length === 0 ? <Message variant=\"info\">\n                                {t(\"your order is empty\")} \n                            </Message>: (\n                                <ListGroup variant=\"flush\">\n                                    {order.orderItems.map((item, index) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                \n                                                <Col md={2}>\n                                                    <Link to={`/product/${item.product}`}>\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                                    </Link>\n                                                </Col>\n                                                \n                                                <Col >\n                                                    <Link to={`/product/${item.product}`}>\n                                                        {item.name}\n                                                    </Link>\n                                                </Col>\n                                                \n                                                <Col md={4}>\n                                                    {item.qty} x ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>{t(\"total\")}</h2>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>{t(\"Order Items\")}: </Col>\n                                    <Col>$ {order.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>{t(\"shipping\")}: </Col>\n                                    <Col>$ {order.shipingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>{t(\"tax\")}: </Col>\n                                    <Col>$ {order.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>{t(\"total\")}: </Col>\n                                    <Col>$ {order.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            {!order.isPaid && (\n                                <ListGroup.Item>\n                                    {loadingPay && <Loader />}\n\n                                    {!sdkReady ? (\n                                        <Loader />\n                                    ):(\n                                        <PayPalButton \n                                            amount={order.totalPrice}\n                                            onSuccess={successPaymentHandler}\n                                        />\n                                    )}\n                                </ListGroup.Item>\n                            )}\n\n                        </ListGroup>\n\n                        {loadingDeliver && <Loader/>}\n                        {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                            <ListGroup.Item variant=\"flush\">\n                                <Button\n                                    type='button'\n                                    className='btn product-btn'\n                                    onClick={deliverHandler}\n                                >\n                                    Mark as delivered\n                                </Button>\n                            </ListGroup.Item>\n                        )}\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default OrderScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/PlaceOrderScreen.js",["206"],"import React, { useEffect } from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport Message from '../components/Message'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport {useDispatch, useSelector } from 'react-redux' //\nimport { createOrder } from '../actions/orderActions'\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\n\nfunction PlaceOrderScreen({ history }) {\n    const {t, i18n} = useTranslation() \n\n    const orderCreate = useSelector(state => state.orderCreate)\n    const {order, error, success} = orderCreate\n\n    const dispatch = useDispatch()\n    const cart = useSelector(state => state.cart)\n\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    cart.shipingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\n    cart.taxPrice = Number((0.002) * cart.itemsPrice).toFixed(2)\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shipingPrice) + Number(cart.taxPrice)).toFixed(2)\n\n    if (!cart.paymentMethod) {\n        history.push('/payment')\n    }\n\n    useEffect(() => {\n        if(success){\n            history.push(`/order/${order._id}`)\n            dispatch({ type: ORDER_CREATE_RESET })\n        }\n    }, [dispatch, success, history, order])\n\n    const placeOrder = () => {\n        dispatch(createOrder({\n            orderItems:cart.cartItems,\n            shippingAddress:cart.shippingAddress,\n            paymentMethod:cart.paymentMethod,\n            itemsPrice:cart.itemsPrice,\n            shipingPrice:cart.shipingPrice,\n            taxPrice:cart.taxPrice,\n            totalPrice:cart.totalPrice,\n        }))\n    }\n    return (\n        <div>\n            <CheckoutSteps step1 step2 step3 step4 />\n\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <h2>{t(\"shipping address\")}</h2>\n\n                            <p>\n                                <strong>{t(\"address\")}: </strong>\n                                {cart.shippingAddress.address}, {cart.shippingAddress.city}\n                                {'  '}\n                                {cart.shippingAddress.postalCode}.\n                                {'  '}\n                                {cart.shippingAddress.country}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>{t(\"Payment Method\")}</h2>\n\n                            <p>\n                                <strong>Method: </strong>\n                                {cart.paymentMethod}\n                            </p>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>{t(\"Order Items\")}</h2>\n                            {cart.cartItems.length === 0 ? <Message variant=\"info\">\n                                {t(\"your cart is empty\")} \n                            </Message>: (\n                                <ListGroup variant=\"flush\">\n                                    {cart.cartItems.map((item, index) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                \n                                                <Col md={2}>\n                                                    <Link to={`/product/${item.product}`}>\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                                    </Link>\n                                                </Col>\n                                                \n                                                <Col >\n                                                    <Link to={`/product/${item.product}`}>\n                                                        {item.name}\n                                                    </Link>\n                                                </Col>\n                                                \n                                                <Col md={4}>\n                                                    {item.qty} x ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>{t(\"total\")}</h2>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>{t(\"items\")}: </Col>\n                                    <Col>$ {cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>{t(\"shipping\")}: </Col>\n                                    <Col>$ {cart.shipingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>{t(\"tax\")}: </Col>\n                                    <Col>$ {cart.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>{t(\"total\")}: </Col>\n                                    <Col>$ {cart.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                {error && <Message variant='danger'>{error}</Message>}\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Button \n                                type=\"button\"\n                                className=\"product-btn\"\n                                disabled={cart.cartItems <= 0}\n                                onClick={placeOrder}\n                                >\n                                    {t(\"Place order\")} \n                                </Button>\n                            </ListGroup.Item>\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default PlaceOrderScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ShippingScreen.js",["207"],"import React, {useState, } from 'react' //useEffect\nimport{ useTranslation } from 'react-i18next'\nimport { Form, Button } from 'react-bootstrap'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { saveShippingAddress } from '../actions/cartActions'\n\nfunction ShippingScreen({history}) {\n    const {t, i18n} = useTranslation()\n\n    const cart = useSelector(state => state.cart)\n    const {shippingAddress} = cart\n\n    const dispatch = useDispatch()\n\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n    const [country, setCountry] = useState(shippingAddress.country)\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(saveShippingAddress({address, city, postalCode, country}))\n        history.push('/payment')\n    }\n\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2/>\n            <h2>{t(\"shipping address\")}</h2>\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId=\"address\">\n                    <Form.Label>{t(\"Address\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"Enter address\"\n                        value={address ? address : ''}\n                        onChange={(e) => setAddress(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"city\">\n                    <Form.Label>{t(\"City\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"Enter city\"\n                        value={city ? city : ''}\n                        onChange={(e) => setCity(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"postalCode\">\n                    <Form.Label>{t(\"Postal Code\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"Enter postalCode\"\n                        value={postalCode ? postalCode : ''}\n                        onChange={(e) => setPostalCode(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"country\">\n                    <Form.Label>{t(\"Country\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"Enter country\"\n                        value={country ? country : ''}\n                        onChange={(e) => setCountry(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button className=\"product-btn\" type='submit' variant='primary'>\n                    {t(\"Continue\")} \n                </Button>\n\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default ShippingScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ProfileScreen.js",["208"],"import React, {useState, useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\n//import { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport { listMyOrders } from '../actions/orderActions'\n\nfunction ProfileScreen({ history }) {\n    const {t, i18n} = useTranslation()\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const { loading:loadingOrders, error:errorOrders, orders } = orderListMy\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        }else{\n            if(!user || !user.name || success || userInfo._id !== user._id){\n                dispatch({type: USER_UPDATE_PROFILE_RESET})\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            }else{\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match')\n        }else{\n            dispatch(updateUserProfile({\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password,\n            }))\n            setMessage('')\n        }\n    }\n\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>{t(\"User Profile\")}</h2>\n                {message && <Message variant='danger' >{message}</Message>}\n            {error && <Message variant='danger' >{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId=\"name\">\n                        <Form.Label>{t(\"name\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"name\"\n                        placeholder=\"Enter your name\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"email\">\n                    <Form.Label>{t(\"email\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"email\"\n                        placeholder=\"example@gmail.com\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>{t(\"password\")}</Form.Label>\n                    <Form.Control\n                        \n                        type=\"password\"\n                        placeholder=\"enter password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"confirmPassword\">\n                    <Form.Label>{t(\"confirm password\")}</Form.Label>\n                    <Form.Control\n                        \n                        type=\"password\"\n                        placeholder=\"confirm your password\"\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type=\"submit\" variant=\"primary\">\n                    {t(\"update\")} \n                </Button>\n\n            </Form>\n            </Col>\n\n            <Col md={9}>\n                <h2>{t(\"My Orders\")}</h2>\n                {loadingOrders ? (\n                    <Loader />\n                ):errorOrders ? (\n                    <Message>{errorOrders}</Message>\n                ):(\n                    <Table striped responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th>id</th>\n                                <th>{t(\"date\")}</th>\n                                <th>{t(\"total\")}</th>\n                                <th>{t(\"paid\")}</th>\n                                <th>{t(\"delivered\")}</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {orders.map(order => (\n                                <tr key={order._id}>\n                                    <td>{order._id}</td>\n                                    <td>{order.createdAt.substring(0, 10)}</td>\n                                    <td>$ {order.totalPrice}</td>\n                                    <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\n                                        <i className='fas fa-times' style={{color:'red'}}></i>\n                                    )}</td>\n                                    <td>{order.isDelivered ? (\n                                        order.deliveredAt.substring(0, 10)\n                                    ):(\n                                        <i className='fas fa-times' style={{color: 'red'}}></i>\n                                    )}</td>\n                                    <td>\n                                        <LinkContainer to={`/order/${order._id}`}>\n                                            <Button className='btn-sm'>{t(\"details\")}</Button>\n                                        </LinkContainer>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                )}\n            </Col>\n        </Row>\n    )\n}\n\nexport default ProfileScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/UserListScreen.js",["209"],"import React, {useEffect} from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport{ useTranslation } from 'react-i18next'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listUsers, deleteUser } from'../actions/userActions'\n\n\nfunction UserListScreen({ history }) {\n    const {t, i18n} = useTranslation()\n\n    const dispatch = useDispatch()\n\n    const userList = useSelector(state => state.userList)\n    const { loading, error, users } = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userDelete = useSelector(state => state.userDelete)\n    const { success:successDelete } = userDelete\n\n    useEffect(() => {\n        if(userInfo && userInfo.isAdmin) {\n            dispatch(listUsers())\n        }else{\n            history.push('/login')\n        }\n    }, [dispatch, history, userInfo, successDelete ])\n\n    const deleteHandler = (id) => {\n        if(window.confirm('Are you shure you want to delete this user?')) {\n            dispatch(deleteUser(id))\n        }\n    }\n\n    return (\n        <div>\n            <h2>{t('users')}</h2>\n            {loading \n                ? (<Loader />)\n                : error\n                    ?(<Message variant='danger'>{error}</Message>)\n                    : (\n                    <Table striped dordered hover responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>{t('name')}</th>\n                                <th>{t('email')}</th>\n                                <th>{t('admin')}</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {users.map(user => (\n                                <tr key={user._id}>\n                                    <td>{user._id}</td>\n                                    <td>{user.name}</td>\n                                    <td>{user.email}</td>\n                                    <td>{user.isAdmin ? (\n                                        <i className='fas fa-check' style={{color: 'green'}}></i>\n                                    ):(\n                                        <i className='fas fa-check' style={{color: 'red'}}></i>\n                                    )}</td>\n\n                                    <td>\n                                        <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                            <Button variant='dark' className='btn-sm'>\n                                                <i className='fas fa-edit'></i>\n                                            </Button>\n\n                                        </LinkContainer>\n\n                                        <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\n                                            <i className='fas fa-trash'></i>\n                                        </Button>\n                                    </td>\n\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n            )}\n        </div>\n    )\n}\n\nexport default UserListScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/LoginScreen.js",["210"],"import React, {useState, useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login } from '../actions/userActions'\n\nfunction LoginScreen({location, history}) {\n    const {t, i18n} = useTranslation()\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { error, loading, userInfo } = userLogin\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n\n    return (\n        <FormContainer>\n            <h2>{t(\"sign in\")}</h2>\n            {error && <Message variant='danger' >{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId=\"email\">\n                    <Form.Label>{t(\"email\")}</Form.Label>\n                    <Form.Control\n                        type=\"email\"\n                        placeholder=\"example@gmail.com\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"password\">\n                    <Form.Label>{t(\"password\")}</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        placeholder=\"enter password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type=\"submit\" variant=\"primary\">\n                    {t(\"sign in\")} \n                </Button>\n            </Form>\n\n            <Row className=\"py-3\">\n                <Col>\n                    {t(\"New Customer\")} <Link \n                    to={redirect ? `/register?redirect=${redirect}` : '/register'}>{t(\"Register\")}</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default LoginScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/RegisterScreen.js",["211"],"import React, {useState, useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { register } from '../actions/userActions'\n\nfunction RegisterScreen({location, history}) {\n    const {t, i18n} = useTranslation()\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, loading, userInfo } = userRegister\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match')\n        }else{\n            dispatch(register(name, email, password, confirmPassword, message))\n        }\n    }\n\n    return (\n        <FormContainer>\n            <h2>{t(\"Register\")}</h2>\n            {message && <Message variant='danger' >{message}</Message>}\n            {error && <Message variant='danger' >{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId=\"name\">\n                    <Form.Label>{t(\"name\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"name\"\n                        placeholder=\"Enter your name\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"email\">\n                    <Form.Label>{t(\"email\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"email\"\n                        placeholder=\"example@gmail.com\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>{t(\"password\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"password\"\n                        placeholder=\"enter password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group  className='mb-3' controlId=\"confirmPassword\">\n                    <Form.Label>{t(\"confirm password\")}</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"password\"\n                        placeholder=\"confirm your password\"\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type=\"submit\" variant=\"primary\">\n                    {t(\"Register\")} \n                </Button>\n\n            </Form>\n\n            <Row className=\"py-3\">\n                <Col>\n                    {t(\"Have An Account\")} <Link \n                    to={redirect ? `/login?redirect=${redirect}` : '/login'}>{t(\"sign in\")}</Link>\n                </Col>\n            </Row>\n\n        </FormContainer>\n    )\n}\n\nexport default RegisterScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/UserEditScreen.js",["212"],"import React, {useState, useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserDetails, updateUser } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\nfunction UserEditScreen({match, history}) {\n    const {t, i18n} = useTranslation()\n\n    const userId = match.params.id\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const { error:errorUpdate, loading:loadingUpdate, success:successUpdate } = userUpdate\n\n    useEffect(() => {\n\n        if(successUpdate){\n            dispatch({type: USER_UPDATE_RESET})\n            history.push('/admin/userlist')\n        }else{\n            if(!user.name || user._id !== Number(userId)){\n                dispatch(getUserDetails(userId))\n            }else{\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n\n    }, [dispatch, user, userId, successUpdate, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({_id:user._id, name, email, isAdmin}))\n    }\n\n    return (\n        <div>\n\n            <Link to='/admin/userlist'>\n                {t(\"goBack\")}\n            </Link>\n\n            <FormContainer>\n                <h2>{t(\"Edit user\")}</h2>\n                {loadingUpdate && <Loader/>}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> \n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId=\"name\">\n                                <Form.Label>{t(\"name\")}</Form.Label>\n                                <Form.Control\n                                    type=\"name\"\n                                    placeholder=\"Enter your name\"\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"email\">\n                                <Form.Label>{t(\"email\")}</Form.Label>\n                                <Form.Control\n                                    type=\"email\"\n                                    placeholder=\"example@gmail.com\"\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"isadmin\">\n                                <Form.Check\n                                    type=\"checkbox\"\n                                    label={t(\"admin\")}\n                                    checked={isAdmin}\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\n                                >\n                                </Form.Check>\n                            </Form.Group>\n\n                            <Button className=\"mt-3\" type=\"submit\" variant=\"primary\">\n                                {t(\"update\")} \n                            </Button>\n\n                        </Form>\n                )}\n\n            </FormContainer>\n        </div>\n    )\n}\n\nexport default UserEditScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ProductEditScreen.js",["213"],"import React, {useState, useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listProductDetails, updateProduct } from '../actions/productActions'\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\n\nfunction ProductEditScreen({match, history}) {\n    const {t, i18n} = useTranslation()\n\n    const productId = match.params.id\n\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [image, setImage] = useState('')\n    const [brand, setBrand] = useState('')\n    const [category, setCategory] = useState('')\n    const [countInStock, setCountInStock] = useState(0)\n    const [description, setDescription] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector(state => state.productDetails)\n    const { error, loading, product } = productDetails\n\n    const productUpdate = useSelector(state => state.productUpdate)\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = productUpdate\n\n    useEffect(() => {\n        if(successUpdate ){\n            dispatch({type: PRODUCT_UPDATE_RESET})\n            history.push(`/admin/productlist`)\n        }else{\n            if(!product.name || product._id !== Number(productId)){\n                dispatch(listProductDetails(productId))\n            }else{\n                setName(product.name)\n                setPrice(product.price)\n                setImage(product.image)\n                setBrand(product.brand)\n                setCategory(product.category)\n                setCountInStock(product.countInStock)\n                setDescription(product.description)\n            }\n        }\n\n        \n    }, [dispatch, product, productId, history, successUpdate ])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateProduct({\n            _id: productId,\n            name,\n            price,\n            image,\n            brand,\n            category,\n            countInStock,\n            description\n        }))\n    }\n\n    // Need to fix the uploading images of product ////// it was done i fixed that\n        const uploadFileHandler = async (e) => {\n            const file = e.target.files[0]\n            const formData = new FormData()\n\n            formData.append('image', file)\n            formData.append('product_id', productId)\n\n            setUploading(true)\n\n            try {\n                const config = {\n                    headers: {\n                        'Content-Type': 'multipart/form-data'\n                    }\n                }\n\n                const { data } = await axios.post('/api/products/upload/', formData, config)\n\n\n                setImage(data)\n                setUploading(false)\n\n            } catch (error) {\n                setUploading(false)\n            }\n    }\n\n    return (\n        <div>\n\n            <Link to='/admin/productlist'>\n                {t('goBack')}\n            </Link>\n\n            <FormContainer>\n                <h2>{t(\"Edit product\")}</h2>\n                {loadingUpdate && <Loader/>}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message> \n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId=\"name\">\n                                <Form.Label>{t(\"productName\")}</Form.Label>\n                                <Form.Control\n                                    type=\"name\"\n                                    placeholder=\"Enter your name\"\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"price\">\n                                <Form.Label>{t(\"price\")}</Form.Label>\n                                <Form.Control\n                                    type=\"number\"\n                                    placeholder=\"Enter price\"\n                                    value={price}\n                                    onChange={(e) => setPrice(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='image'>\n                                <Form.Label>{t(\"image\")}</Form.Label>\n                                <Form.Control\n                                    type='text'\n                                    placeholder='Enter image'\n                                    value={image}\n                                    onChange={(e) => setImage(e.target.value)}\n                                    readOnly\n                                >\n                                </Form.Control>\n\n                                {uploading && <Loader />}\n\n                                <Form.Group controlId=\"formFileMultiple\"  className=\"mb-3\">\n                                    <Form.Control custom onChange={uploadFileHandler} size='sm' type=\"file\" multiple />\n                                </Form.Group>\n\n                            </Form.Group>\n                                                        \n                            <Form.Group controlId=\"brand\">\n                                <Form.Label>{t(\"brand\")}</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Enter brand\"\n                                    value={brand}\n                                    onChange={(e) => setBrand(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"category\">\n                                <Form.Label>{t(\"category\")}</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Enter category\"\n                                    value={category}\n                                    onChange={(e) => setCategory(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"countInStock\">\n                                <Form.Label>{t(\"stock\")}</Form.Label>\n                                <Form.Control\n                                    type=\"number\"\n                                    placeholder=\"Enter countInStock\"\n                                    value={countInStock}\n                                    onChange={(e) => setCountInStock(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group className='py-3' controlId=\"description\">\n                                <Form.Label>{t(\"description\")}</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Enter description\"\n                                    value={description}\n                                    onChange={(e) => setDescription(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Button type=\"submit\" variant=\"primary\">\n                                {t(\"update\")} \n                            </Button>\n\n                        </Form>\n                )}\n\n            </FormContainer>\n        </div>\n    )\n}\n\nexport default ProductEditScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/ProductListScreen.js",["214"],"import React, {useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\nimport {PRODUCT_CREATE_RESET} from '../constants/productConstants'\n\n\nfunction ProductListScreen({ history, match }) {\n    const {t, i18n} = useTranslation()\n\n    const dispatch = useDispatch()\n\n    const productList = useSelector(state => state.productList)\n    const { loading, error, products, pages, page } = productList\n\n    const productDelete = useSelector(state => state.productDelete)\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\n\n    const productCreate = useSelector(state => state.productCreate)\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    let keyword = history.location.search\n\n    useEffect(() => {\n        dispatch({ type: PRODUCT_CREATE_RESET })\n        if(!userInfo.isAdmin) {\n            history.push('/login')\n        }\n\n        if(successCreate){\n            history.push(`/admin/product/${createdProduct._id}/edit`)\n        }else{\n            dispatch(listProducts(keyword))\n        }\n    }, [dispatch, history, userInfo, keyword, successDelete, successCreate, createdProduct])\n\n    const deleteHandler = (id) => {\n        if(window.confirm('Are you shure you want to delete this product ?')) {\n            dispatch(deleteProduct(id))\n        }\n    }\n\n    const createProductHandler = () => {\n        dispatch(createProduct())\n    }\n\n    return (\n        <div>\n            <Row className='align-items-center'>\n                <Col>\n                    <h2>{t(\"products\")}</h2>\n                </Col>\n                <Col className='text-right'>\n                    <Button className='my-3' style={{float: 'right'}} onClick={createProductHandler}>\n                        <i className='fas fa-plus'></i> {t(\"Create Product\")}\n                    </Button>\n                </Col>\n            </Row>\n\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n            {loadingCreate && <Loader />}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n            {loading \n                ? (<Loader />)\n                : error\n                    ?(<Message variant='danger'>{error}</Message>)\n                    : (\n                        <div>\n                            <Table striped dordered hover responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>{t(\"productName\")}</th>\n                                        <th>{t(\"price\")}</th>\n                                        <th>{t(\"category\")}</th>\n                                        <th>{t(\"brand\")}</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {products.map(product => (\n                                        <tr key={product._id}>\n                                            <td>{product._id}</td>\n                                            <td>{product.name}</td>\n                                            <td>$ {product.price}</td>\n                                            <td>{product.category}</td>\n                                            <td>{product.brand}</td>\n\n                                            <td>\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                                    <Button variant='dark' className='btn-sm'>\n                                                        <i className='fas fa-edit'></i>\n                                                    </Button>\n\n                                                </LinkContainer>\n\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\n                                                    <i className='fas fa-trash'></i>\n                                                </Button>\n                                            </td>\n\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                            <Paginate pages={pages} page={page} isAdmin={true}/>\n                        </div>\n\n            )}\n        </div>\n    )\n}\n\nexport default ProductListScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/screens/OrderListScreen.js",["215"],"import React, {useEffect} from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listOrders } from'../actions/orderActions'\n\n\nfunction OrderListScreen({ history }) {\n    const {t, i18n} = useTranslation()\n\n    const dispatch = useDispatch()\n\n    const orderList = useSelector(state => state.orderList)\n    const { loading, error, orders } = orderList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    useEffect(() => {\n        if(userInfo && userInfo.isAdmin) {\n            dispatch(listOrders())\n        }else{\n            history.push('/login')\n        }\n    }, [dispatch, history, userInfo ])\n\n\n    return (\n        <div>\n            <h2>{t(\"orders\")}</h2>\n            {loading \n                ? (<Loader />)\n                : error\n                    ?(<Message variant='danger'>{error}</Message>)\n                    : (\n                    <Table striped dordered hover responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>{t(\"user\")}</th>\n                                <th>{t(\"date\")}</th>\n                                <th>{t(\"total\")}</th>\n                                <th>{t(\"paid\")}</th>\n                                <th>{t(\"delivered\")}</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {orders.map(order => (\n                                <tr key={order._id}>\n                                    <td>{order._id}</td>\n                                    <td>{order.user && order.user.name}</td>\n                                    <td>{order.createdAt.substring(0, 10)}</td>\n                                    <td>$ {order.totalPrice}</td>\n                                    <td>{order.isPaid ? (\n                                        order.paidAt.substring(0, 10)\n                                    ):(\n                                        <i className='fas fa-times' style={{color: 'red'}}></i>\n                                    )}</td>\n\n                                    <td>{order.isDelivered ? (\n                                        order.deliveredAt.substring(0, 10)\n                                    ):(\n                                        <i className='fas fa-times' style={{color: 'red'}}></i>\n                                    )}</td>\n\n\n                                    <td>\n                                        <LinkContainer to={`/order/${order._id}/`}>\n                                            <Button variant='dark' className='btn-sm'>\n                                                {t(\"details\")} \n                                            </Button>\n                                        </LinkContainer>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n            )}\n        </div>\n    )\n}\n\nexport default OrderListScreen\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/SearchBox.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Rating.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Loader.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/FormContainer.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/CheckoutSteps.js",["216"],"import React from 'react'\nimport{ useTranslation } from 'react-i18next'\nimport {Nav} from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\n\nfunction CheckoutSteps({ step1, step2, step3, step4 }) {\n    const {t, i18n} = useTranslation()\n    return (\n        <Nav className='justify-content-center mb-4'>\n\n            <Nav.Item>\n                {step1 ? (\n                    <LinkContainer to='/login'>\n                        <Nav.Link>{t(\"login\")}</Nav.Link>\n                    </LinkContainer>\n                ): (\n                    <Nav.Link disabled>{t(\"login\")}</Nav.Link>\n                )}\n            </Nav.Item>\n\n            <Nav.Item>\n                {step2 ? (\n                    <LinkContainer to='/shipping'>\n                        <Nav.Link>{t(\"shipping\")}</Nav.Link>\n                    </LinkContainer>\n                ): (\n                    <Nav.Link disabled>{t(\"shipping\")}</Nav.Link>\n                )}\n            </Nav.Item>\n\n            <Nav.Item>\n                {step3 ? (\n                    <LinkContainer to='/payment'>\n                        <Nav.Link>{t(\"payment\")}</Nav.Link>\n                    </LinkContainer>\n                ): (\n                    <Nav.Link disabled>{t(\"payment\")}</Nav.Link>\n                )}\n            </Nav.Item>\n\n            <Nav.Item>\n                {step4 ? (\n                    <LinkContainer to='/placeorder'>\n                        <Nav.Link>{t(\"Place order\")}</Nav.Link>\n                    </LinkContainer>\n                ): (\n                    <Nav.Link disabled>{t(\"Place order\")}</Nav.Link>\n                )}\n            </Nav.Item>\n\n        </Nav>\n    )\n}\n\nexport default CheckoutSteps\n","/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Product.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Paginate.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Message.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/constants/productConstants.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/constants/userConstants.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/constants/cartConstants.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/ProductCarousel.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/constants/orderConstants.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/actions/userActions.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/actions/productActions.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/actions/orderActions.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/actions/cartActions.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/i18n.js",[],"/home/john/projects/for_deploy/aminademo/AminaShop/frontend/src/components/Wts.js",["217"],{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":6,"column":8,"nodeType":"224","messageId":"225","endLine":6,"endColumn":12},{"ruleId":"222","severity":1,"message":"226","line":1,"column":21,"nodeType":"224","messageId":"225","endLine":1,"endColumn":25},{"ruleId":"222","severity":1,"message":"227","line":1,"column":27,"nodeType":"224","messageId":"225","endLine":1,"endColumn":30},{"ruleId":"222","severity":1,"message":"228","line":1,"column":58,"nodeType":"224","messageId":"225","endLine":1,"endColumn":64},{"ruleId":"222","severity":1,"message":"223","line":5,"column":10,"nodeType":"224","messageId":"225","endLine":5,"endColumn":14},{"ruleId":"222","severity":1,"message":"229","line":16,"column":15,"nodeType":"224","messageId":"225","endLine":16,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":10,"column":15,"nodeType":"224","messageId":"225","endLine":10,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":10,"column":15,"nodeType":"224","messageId":"225","endLine":10,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":15,"column":15,"nodeType":"224","messageId":"225","endLine":15,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":14,"column":15,"nodeType":"224","messageId":"225","endLine":14,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":12,"column":15,"nodeType":"224","messageId":"225","endLine":12,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":10,"column":15,"nodeType":"224","messageId":"225","endLine":10,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":14,"column":15,"nodeType":"224","messageId":"225","endLine":14,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":12,"column":15,"nodeType":"224","messageId":"225","endLine":12,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":12,"column":15,"nodeType":"224","messageId":"225","endLine":12,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":12,"column":15,"nodeType":"224","messageId":"225","endLine":12,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":13,"column":15,"nodeType":"224","messageId":"225","endLine":13,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":14,"column":15,"nodeType":"224","messageId":"225","endLine":14,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":14,"column":15,"nodeType":"224","messageId":"225","endLine":14,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":12,"column":15,"nodeType":"224","messageId":"225","endLine":12,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":7,"column":15,"nodeType":"224","messageId":"225","endLine":7,"endColumn":19},{"ruleId":"222","severity":1,"message":"229","line":8,"column":15,"nodeType":"224","messageId":"225","endLine":8,"endColumn":19},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"no-unused-vars","'i18n' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","'i18n' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]